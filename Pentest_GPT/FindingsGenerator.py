import argparse
import os
from .Loader import Loader
import os
import openai

class Pentest_GPT:
    @staticmethod
    def get_parser() -> argparse.ArgumentParser:
        parser = argparse.ArgumentParser(usage="Pentest_GPT --api-key \"<OpenAI_Api_Key>\" --title \"<Finding Title>\"", description="Pentest_GPT CLI", prog="python -m Pentest_GPT")
        parser.add_argument(
            "-t",
            "--title",
            required=True,
            action='append',
            help="Finding Title",
        )
        parser.add_argument(
            "-k",
            "--api-key",
            type=str,
            required=True,
            help="OpenAI API key",
        )
        parser.add_argument(
            "-c",
            "--company",
            type=str,
            default=None,
            help="Perspective to write finding from",
        )
        return parser

    @staticmethod
    def CreateFinding(api_key, titles, company):
        openai.api_key = api_key
        systemPrompt = "You are a penetration tester writing a professional report for client"

        # Write it from the company perspective
        if company != None:
            systemPrompt += " for " + company

        # Set up the bot
        for title in titles:
            loader = Loader("Thinking...", "Thinking... Done!\n\n\n\n***If you didn't see any URL in below text please run one more time.***\n\n\n\n").start()
            prompt = (
                # Preamble
                
                "Write a finding for \"" + title + "\" for Penteset report for client in professional writing with full details and use [website/application name] tag for easy editing.\n"
                "It should contain a Title, Description,POC,POC URLs,Remediation,More information found URLs,Risk Classification,Likelihood,Severity,Non-technical Summary. Nothing else.\n"

                # Title Spec
                "Rename title to professional title.\n"

                # Description Spec
                "The description section should contain minimum two paragraph with infomation about vulnerability,enough detail to understand the finding and the risk posed to the business with impact.\n"

                # POC Spec
                "POC section should contain overview, enough description about POC,steps and payload."
                "Provide full POC with proper payload and exploit.\n "
  
                # POC URLs Spec
                "Provide two to three online url link or websites about more details about POC,Payloads and findings and this must be provided.\n "

                # Remediation Spec
                "The remediation should contain a two paragraph outlining how to remediate the finding.\n"
                "If multiple steps are required, they can be listed too.\n"

                # More information found URLs Spec
                "three to four onilne url link or websites about Remediation and this must be provided.\n"

                # Risk Rating Spec
                "The risk rating is based on the likelihood and impact of exploitation following on the OWASP Risk Rating Methodology.\n" 
                "Risk rating section should be displayed in the format: ```Risk: <insert overall risk> \nImpact: <insert impact> : <insert full description about impact> \nLikelihood: <insert likelihood of exploitation> : <insert full  description about likelihood>\n Severity : <insert Severity of exploitation> : <insert full description about Severity>```\n"
                "The overall risk can be \"Informational\", \"Low\", \"Medium\", \"High\", or \"Critical\".\n"
                "The impact can be \"Insignificant\", \"Minor\", \"Moderate\", \"Major\", or \"Very High\".\n"
                "The likelihood can be \"Rare\", \"Unlikely\", \"Possible\", \"Likely\", or \"Almost Certain\".\n"
                "The Severity can be \"Informational\", \"Low\", \"Medium\", \"High\", or \"Critical\".\n"

                # Non-technical Summary Spec
                "The Non-technical Summary section should contain enough detail to understand the finding and the risk posed to the business for stake holders.\n"
            )

            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content" : systemPrompt},
                    {"role": "user", "content": prompt}
                ]
            )
            message = completion.choices[0].message.content
            loader.stop()
            print(message)
            print("")