import argparse
import os
from .Loader import Loader
import os
import openai

class Pentest_GPT:
    @staticmethod
    def get_parser() -> argparse.ArgumentParser:
        parser = argparse.ArgumentParser(usage="Pentest_GPT --api-key \"<OpenAI_Api_Key>\" --title \"<Finding Title>\"", description="Pentest_GPT CLI", prog="python -m Pentest_GPT")
        parser.add_argument(
            "-t",
            "--title",
            required=True,
            action='append',
            help="Finding Title",
        )
        parser.add_argument(
            "-k",
            "--api-key",
            type=str,
            required=True,
            help="OpenAI API key",
        )
        parser.add_argument(
            "-c",
            "--company",
            type=str,
            default=None,
            help="Perspective to write finding from",
        )
        return parser

    @staticmethod
    def CreateFinding(api_key, titles, company):
        openai.api_key = api_key
        systemPrompt = "You are a penetration tester writing a report"

        # Write it from the company perspective
        if company != None:
            systemPrompt += " for " + company

        # Set up the bot
        for title in titles:
            loader = Loader("Thinking...", "Thinking... Done!\n").start()
            prompt = (
                # Preamble
                
                "Write a finding for \"" + title + "\".\n"
                "It should contain a Proper Title, Description,Remediation,More information found URLs,Risk Classification,Likelihood,Severity,Non-technical Summary. Nothing else.\n"
                # Title Spec
                "Rename title to proper title.\n"

                # Description Spec
                "The description section should contain enough and two paragraph detail to understand the finding and the risk posed to the business with with impact\n"

                # Remediation Spec
                "The remediation should contain a paragraph outlining how to remediate the finding.\n"
                "If multiple steps are required, they can be listed too.\n"

                # Moreinfo Spec
                "2-3 Url Link about finding and Remediation.\n"

                # Risk Rating Spec
                "The risk rating is based on the likelihood and impact of exploitation following on the OWASP Risk Rating Methodology.\n" 
                "Risk rating section should be displayed in the format: ```Risk: <insert overall risk> \nImpact: <insert impact> : <insert description about impact> \nLikelihood: <insert likelihood of exploitation> : <insert description about likelihood>\n Severity : <insert Severity of exploitation> : <insert description about Severity>```\n"
                "The overall risk can be \"Informational\", \"Low\", \"Medium\", \"High\", or \"Critical\".\n"
                "The impact can be \"Insignificant\", \"Minor\", \"Moderate\", \"Major\", or \"Very High\".\n"
                "The likelihood can be \"Rare\", \"Unlikely\", \"Possible\", \"Likely\", or \"Almost Certain\".\n"
                "The Severity can be \"Informational\", \"Low\", \"Medium\", \"High\", or \"Critical\".\n"

                # Non-technical Summary Spec
                "The Non-technical Summary section should contain enough detail to understand the finding and the risk posed to the business for stake holders.\n"
            )

            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content" : systemPrompt},
                    {"role": "user", "content": prompt}
                ]
            )
            message = completion.choices[0].message.content
            loader.stop()
            print(message)
            print("")